name: Microservices Airbnb Jobs

on:
  push:
    branches:
      - test_github_pipeline
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17 (or Java version used in your project)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17' 
          cache: maven

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest ./microservice-eureka
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest ./database
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest ./microservice-authentification
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest ./microservice-booking
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest ./microservice-listing
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-tracking:latest ./microservice-tracking
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest ./microservice-user_management
      
      - name: Push Docker images to registry
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-tracking:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest

  test:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Run tests with Maven
        run: mvn test

  deploy:
    runs-on: ubuntu-22.04
    needs: test
    steps:
      # 1. Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Install Minikube
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube

      # 3. Start Minikube
      - name: Start Minikube
        run: |
          minikube start --driver=docker
          kubectl get nodes

      # 4. Set up Docker to use Minikube's daemon
      - name: Use Minikube Docker Daemon
        run: eval $(minikube docker-env)

      # 5. Pull Docker images from Docker Hub 
      - name: Pull Docker images
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-tracking:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest

      # 6. Deploy Database, Eureka Service
      - name: Deploy Database, Eureka to Kubernetes 
        run: |
          kubectl apply -f k8s-manifests/database-deployment.yaml
          kubectl apply -f k8s-manifests/eureka-deployment.yaml

      - name: Wait for Eureka & Database Pods to be Ready
        run: kubectl wait --for=condition=ready pod --all --timeout=120s

      # 7. Deploy All Microservices
      # 7.1. Deploy Authentification Service
      - name: Deploy Authentification Service to Kubernetes
        run: kubectl apply -f k8s-manifests/authentification-deployment.yaml

      - name: Wait Authentification pod to be ready
        run: kubectl wait --for=condition=ready pod -l app=authentification --timeout=120s

       # 8. Expose Authentification service and test it
      - name: Expose Authentification
        run: |
          kubectl expose deployment authentification --type=NodePort --name=authentification-service
          kubectl expose deployment eureka --type=NodePort --name=eureka-service

      - name: Describe svc
        run: |
          kubectl describe svc authentification-service
          kubectl describe svc eureka-service

      - name: Create debug pod
        run: kubectl run debug --image=curlimages/curl --restart=Never -- sleep 3600

      - name: Wait for debug pod to be ready
        run: kubectl wait --for=condition=Ready pod/debug --timeout=60s

      - name: Test service from inside cluster
        run: kubectl exec debug -- curl http://authentification-service:8081/auth/ping/

      - name: Get logs for authentification service
        run: |
          kubectl logs deployment/authentification

      # 9. Retrieve Minikube IP and test with curl
      - name: Retrieve Minikube IP and dynamic NodePort
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "Minikube IP: $MINIKUBE_IP"
          NODE_PORT_AUTHENTIFICATION=$(kubectl get svc authentification-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "NodePort Authentification: $NODE_PORT_AUTHENTIFICATION"
          SERVICE_URL_AUTHENTIFICATION="http://$MINIKUBE_IP:$NODE_PORT_AUTHENTIFICATION/auth/ping"
          echo "Service URL of Authentification: $SERVICE_URL_AUTHENTIFICATION"
          curl $SERVICE_URL_AUTHENTIFICATION

      - name: Deploy Booking Service to Kubernetes
        run: kubectl apply -f k8s-manifests/booking-deployment.yaml

      - name: Wait 30 seconds
        run: sleep 30
      
      - name: Describe Booking pod
        run: |
          POD_NAME=$(kubectl get pods -l app=booking -o jsonpath='{.items[0].metadata.name}')
          echo "Describe Pod: $POD_NAME"
          kubectl describe pod $POD_NAME
          echo "Logs of Pod: $POD_NAME"
          kubectl logs $POD_NAME
          echo "All pods wide"
          kubectl get pods -o wide

      - name: Wait Booking pod to be ready
        run: kubectl wait --for=condition=ready pod -l app=booking --timeout=120s

       # 8. Expose Booking service and test it
      - name: Expose Booking
        run: kubectl expose deployment booking --type=NodePort --name=booking-service

      - name: Test Booking service from inside cluster
        run: kubectl exec debug -- curl http://booking-service:8082/bookings/ping/

      - name: Retrieve Minikube IP and dynamic NodePort Booking
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "Minikube IP: $MINIKUBE_IP"
          NODE_PORT_BOOKING=$(kubectl get svc booking-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "NodePort Booking: $NODE_PORT_BOOKING"
          SERVICE_URL_BOOKING="http://$MINIKUBE_IP:$NODE_PORT_BOOKING/bookings/ping"
          echo "Service URL of Booking: $SERVICE_URL_BOOKING"
          curl $SERVICE_URL_BOOKING

      - name: Deploy Listing Service to Kubernetes
        run: kubectl apply -f k8s-manifests/listing-deployment.yaml

      - name: Wait Listing pod to be ready
        run: kubectl wait --for=condition=ready pod -l app=listing --timeout=120s

       # 8. Expose Listing service and test it
      - name: Expose Listing
        run: kubectl expose deployment listing --type=NodePort --name=listing-service

      - name: Get logs for listing service
        run: |
          kubectl logs deployment/listing

      # - name: Test Listing service from inside cluster
      #   run: kubectl exec debug -- curl http://listing-service:8083/listings/ping/

      - name: Retrieve Minikube IP and dynamic NodePort Listing
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "Minikube IP: $MINIKUBE_IP"
          NODE_PORT_LISTING=$(kubectl get svc listing-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "NodePort Listing: $NODE_PORT_LISTING"
          SERVICE_URL_LISTING="http://$MINIKUBE_IP:$NODE_PORT_LISTING/listings/ping"
          echo "Service URL of Listing: $SERVICE_URL_LISTING"
          curl $SERVICE_URL_LISTING

      - name: Deploy Tracking Service to Kubernetes
        run: kubectl apply -f k8s-manifests/tracking-deployment.yaml

      - name: Wait Tracking pod to be ready
        run: kubectl wait --for=condition=ready pod -l app=tracking --timeout=120s

       # 8. Expose Tracking service and test it
      - name: Expose Tracking
        run: kubectl expose deployment tracking --type=NodePort --name=tracking-service

      - name: Test Tracking service from inside cluster
        run: kubectl exec debug -- curl http://tracking-service:8084/tracking/ping/

      - name: Retrieve Minikube IP and dynamic NodePort Tracking
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "Minikube IP: $MINIKUBE_IP"
          NODE_PORT_TRACKING=$(kubectl get svc tracking-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "NodePort Tracking: $NODE_PORT_TRACKING"
          SERVICE_URL_TRACKING="http://$MINIKUBE_IP:$NODE_PORT_TRACKING/tracking/ping"
          echo "Service URL of Tracking: $SERVICE_URL_TRACKING"
          curl $SERVICE_URL_TRACKING

      - name: Deploy User Management Service to Kubernetes
        run: kubectl apply -f k8s-manifests/user_management-deployment.yaml

      - name: Wait User Management pod to be ready
        run: kubectl wait --for=condition=ready pod -l app=user-management --timeout=120s

       # 8. Expose User Management service and test it
      - name: Expose User Management
        run: kubectl expose deployment user-management --type=NodePort --name=user-management-service

      - name: Test User Management service from inside cluster
        run: kubectl exec debug -- curl http://user-management-service:8085/users/ping/

      - name: Retrieve Minikube IP and dynamic NodePort User Management
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "Minikube IP: $MINIKUBE_IP"
          NODE_PORT_USER_MANAGEMENT=$(kubectl get svc user-management-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "NodePort User Management: $NODE_PORT_USER_MANAGEMENT"
          SERVICE_URL_USER_MANAGEMENT="http://$MINIKUBE_IP:$NODE_PORT_USER_MANAGEMENT/users/ping"
          echo "Service URL of User Management: $SERVICE_URL_USER_MANAGEMENT"
          curl $SERVICE_URL_USER_MANAGEMENT