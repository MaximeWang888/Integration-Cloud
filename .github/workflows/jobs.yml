name: Microservices Airbnb Jobs

on:
  push:
    branches:
      - test_github_pipeline
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17 (or Java version used in your project)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17' 
          cache: maven

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest ./microservice-eureka
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest ./database
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest ./microservice-authentification
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest ./microservice-booking
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest ./microservice-listing
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-tracking:latest ./microservice-tracking
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest ./microservice-user_management
      
      - name: Push Docker images to registry
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-tracking:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest

  test:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Run tests with Maven
        run: mvn test

  deploy:
    runs-on: ubuntu-22.04
    needs: test
    steps:
      # 1. Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Install Minikube
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube

      # 3. Start Minikube
      - name: Start Minikube
        run: |
          minikube start --driver=docker
          kubectl get nodes

      # 4. Set up Docker to use Minikube's daemon
      - name: Use Minikube Docker Daemon
        run: eval $(minikube docker-env)

      # 5. Build Docker images
      - name: Build Docker images
        run: |
          docker build -t microservice-eureka:latest ./microservice-eureka
          docker build -t microservice-database:latest ./database
          docker build -t microservice-authentification:latest ./microservice-authentification

      # 6. Deploy Database, Eureka Service
      - name: Deploy Database, Eureka to Kubernetes 
        run: |
          kubectl apply -f k8s-manifests/database-deployment.yaml
          kubectl apply -f k8s-manifests/eureka-deployment.yaml

      - name: Wait for Eureka & Database Pods to be Ready
        run: kubectl wait --for=condition=ready pod --all --timeout=120s

      # 7. Deploy All Microservices
      - name: Deploy All Microservices to Kubernetes
        run: |
          kubectl apply -f k8s-manifests/authentification-deployment.yaml

      - name: Wait All Microservices pod to be ready
        run: kubectl wait --for=condition=ready pod --all --timeout=120s

      # 8. Verify pods are running
      - name: Verify Pods
        run: kubectl get pods -o wide

      # 9. Expose the service and test it
      - name: Expose Authentification Service
        run: kubectl expose deployment authentification --type=NodePort --name=authentification-service

      - name: Describe svc
        run: kubectl describe svc authentification-service

      - name: Create debug pod
        run: |
          kubectl run debug --image=curlimages/curl --restart=Never -- sleep 3600

      - name: Wait for debug pod to be ready
        run: |
          kubectl wait --for=condition=Ready pod/debug --timeout=60s

      - name: Test service from inside cluster
        run: |
          kubectl exec debug -- curl http://authentification-service:8081/auth/ping/

      - name: Delete debug pod
        run: |
          kubectl delete pod debug

      # 10. Retrieve Minikube IP and test with curl
      - name: Retrieve Minikube IP and dynamic NodePort
        run: |
          # Récupérer l'IP de Minikube
          MINIKUBE_IP=$(minikube ip)
          
          # Afficher l'IP de Minikube
          echo "Minikube IP: $MINIKUBE_IP"
          
          # Obtenir le port dynamique (NodePort) de ton service
          NODE_PORT=$(kubectl get svc authentification-service -o jsonpath='{.spec.ports[0].nodePort}')
          
          # Afficher le NodePort
          echo "NodePort: $NODE_PORT"
          
          # Construire l'URL du service avec l'IP de Minikube et le NodePort
          SERVICE_URL="http://$MINIKUBE_IP:$NODE_PORT/auth/ping"
          echo "Service URL: $SERVICE_URL"
          
          # Tester la connexion avec curl
          curl $SERVICE_URL
