
# name: Microservices Airbnb Jobs

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches: 
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-22.04

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up JDK 17 (or Java version used in your project)
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '17' 
#           cache: maven

#       - name: Build with Maven
#         run: mvn clean install -DskipTests

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and tag Docker images
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest ./microservice-eureka
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest ./database
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest ./microservice-authentification
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest ./microservice-booking
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest ./microservice-listing
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-tracking:latest ./microservice-tracking
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest ./microservice-user_management
#       - name: Push Docker images to registry
#         run: |
#           docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-tracking:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest
#       - name: Install Minikube
#         run: |
#           curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
#           sudo mv minikube-linux-amd64 /usr/local/bin/minikube
#           sudo chmod +x /usr/local/bin/minikube

#   test:
#     runs-on: ubuntu-22.04
#     needs: build
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '17'
#           cache: maven

#       - name: Run tests with Maven
#         run: mvn test

#   deploy:
#     runs-on: ubuntu-22.04
#     needs: test
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Start Minikube
#         run: minikube start --driver=docker --cpus=4 --memory=8192 --kubernetes-version=v1.21.0

#       - name: Set up kubectl context for Minikube
#         run: |
#           kubectl config use-context minikube

#       - name: Use Minikube Docker Daemon
#         run: eval $(minikube docker-env)

#       - name: Load Docker images into Minikube
#         run: |
#           minikube image load ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-database:latest
#           minikube image load ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-eureka:latest
#           minikube image load registry.k8s.io/metrics-server/metrics-server:v0.7.2
#           minikube image load ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-authentification:latest
#           minikube image load ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-booking:latest
#           minikube image load ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-listing:latest
#           minikube image load ${{ secrets.DOCKER_USERNAME }}/microservice-airbnb-user_management:latest
      
#       - name: Apply Kubernetes Database, Eureka and Metric Server manifests
#         run: |
#           kubectl apply -f ./k8s-manifests/database-deployment.yaml
#           kubectl apply -f ./k8s-manifests/metrics-server-deployment.yaml
#           kubectl apply -f ./k8s-manifests/eureka-deployment.yaml
      
#       - name: Wait 90 seconds for Database Pod to be Ready
#         run: |
#           kubectl wait --for=condition=ready pod --all --timeout=90s
      
#       - name: Apply Kubernetes manifests
#         run: |
#           kubectl apply -f ./k8s-manifests/authentification-deployment.yaml
      
#       - name: Wait 30 seconds
#         run: sleep 30

#       - name: Expose service in Minikube
#         run: |
#           kubectl expose deployment authentification --type=NodePort --name=authentification-service
#           minikube service authentification-service --url &
#           export SERVICE_URL=$(minikube service authentification-service --url)
#           echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
      
#       - name: Get all pods 
#         run: kubectl get pod -A
      
#       - name: Wait authentification pod to be ready
#         run: kubectl wait --for=condition=ready pod -l app=authentification --timeout=90s

#       - name: Logs of authentification pod 2
#         run: |
#           POD_NAME=$(kubectl get pods -l app=authentification -o jsonpath='{.items[0].metadata.name}')
#           echo "Fetching logs for Pod: $POD_NAME"
#           echo "========== POD LOGS =========="
#           kubectl logs $POD_NAME
#           kubectl get pod -A
#           kubectl describe pod $POD_NAME 
#           kubectl get svc authentification-service
#           kubectl get pods -l app=authentification
#           kubectl describe pod

name: Deploy to Minikube

on:
  push:
    branches:
      - test_github_pipeline

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Install kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # 3. Install Minikube
      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

      # 4. Start Minikube
      - name: Start Minikube
        run: |
          sudo minikube start --driver=docker
          sudo chown -R $USER ~/.kube ~/.minikube
          kubectl get nodes

      # 5. Set up Docker to use Minikube's daemon
      - name: Set up Docker environment
        run: eval $(minikube docker-env)

      # 6. Build Docker images
      - name: Build Docker images
        run: |
          docker build -t microservice-eureka:latest ./microservice-eureka
          docker build -t microservice-database:latest ./database
          docker build -t microservice-authentification:latest ./microservice-authentification

      # 7. Apply Kubernetes manifests (Database first)
      - name: Deploy Database to Kubernetes
        run: kubectl apply -f k8s-manifests/database-deployment.yaml

      - name: Wait for Database Pod to be Ready
        run: kubectl wait --for=condition=ready pod -l app=database --timeout=120s

      # 8. Deploy Eureka
      - name: Deploy Eureka to Kubernetes
        run: kubectl apply -f k8s-manifests/eureka-deployment.yaml

      - name: Wait for Eureka Pod to be Ready
        run: kubectl wait --for=condition=ready pod -l app=eureka-server --timeout=120s

      # 9. Deploy Authentification Service
      - name: Deploy Authentification Service to Kubernetes
        run: kubectl apply -f k8s-manifests/authentification-deployment.yaml

      - name: Wait for Authentification Pod to be Ready
        run: kubectl wait --for=condition=ready pod -l app=authentification --timeout=120s

      # 10. Verify pods are running
      - name: Verify Pods
        run: kubectl get pods -o wide

      # 11. Expose the service and test it
      - name: Expose Authentification Service
        run: kubectl expose deployment authentification --type=NodePort --name=authentification-service

      - name: Test Authentification Service
        run: |
          URL=$(minikube service authentification-service --url)
          echo "Service URL: $URL"
          curl $URL